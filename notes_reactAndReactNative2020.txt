#DIV vs. Fragment

If your React component renders several sibling elements, say three <p> elements, for
instance, you would have to wrap them in <div> because React would only allow
components to return a single element. The only problem with this approach is that it leads
to a lot of unnecessary DOM structure. Wrapping your elements with <Fragment> is the
same as wrapping them with <div>, except there won't be any superfluous DOM elements.
You can read more about fragments here: https:/ / reactjs. org/ docs/ fragments. html.

#Why Div?

You may have noticed the surrounding <div> tag, grouping together all
of the other tags as its children. This is because React needs a root
component to render.

#State vs Props.

The real difference is that with
properties, it's often a parent component that decides when to render the JSX. The
component doesn't actually know how to re-render itself. As you'll see throughout this
book, this type of top-down flow is easier to predict than state that changes all over the
place.

#Initial component state

The initial state of a component isn't actually required, but if your component uses state, it
should be set. This is because if the component expects certain state properties to be there
and they aren't, then the component will either fail or render something unexpected.
Thankfully, it's easy to set the initial component state.

The initial state of a component should always be an object with one or more properties.

#Merging the component state
Instead of passing a new
object to merge into the existing state, you can pass a function.

You can use the spread operator to do this
(...state).